function lerp(s,t,e){return(1-e)*s+e*t}function toBytesInt32(s){var t=new ArrayBuffer(4);const e=new DataView(t);return e.setUint32(0,s,!1),t}class BaseVector{constructor(...s){this.values=s}lerp(t,s,...e){let i=[];s instanceof BaseVector?e=s.values:e.push(s);for(let s=0;s<Math.max(this.values.length,e.length);s++){var r=this.values[s]||0,a=e[s]||0;i[s]=lerp(r,a,t)}return new BaseVector(...i)}}class Vector3 extends BaseVector{constructor(s=0,t=0,e=0){super(s,t,e),this.X=this.values[0],this.Y=this.values[1],this.Z=this.values[2]}}class CFrame{constructor(s=0,t=0,e=0,i=0,r=0,a=0,h=0,n=0,o=0,l=0,c=0,u=0){this.x=s,this.y=t,this.z=e,this.R00=i,this.R01=r,this.R02=a,this.R10=h,this.R11=n,this.R12=o,this.R20=l,this.R21=c,this.R22=u,s instanceof Vector3&&this._setXYZFromVector3(s)}_setXYZFromVector3(s,t){this.x=s.x,this.y=s.y,this.z=s.z}get Position(){return new Vector3(this.x,this.y,this.z)}set Position(s){s instanceof Vector3?this._setXYZFromVector3(s):s instanceof Array&&(this.x=s[0],this.x=s[1],this.x=s[2])}}class Color3 extends BaseVector{constructor(s,t,e){super(s,t,e),this.R=s,this.G=t,this.B=e}}class Color3uint8 extends BaseVector{constructor(s,t,e,i=255){if(super(i,s,t,e),"number"==typeof s)if("number"==typeof t)this.values=[i,s,t,e];else{e=toBytesInt32(s);let t=new DataView(e);for(let s=0;s<t.byteLength;s++)this.values[s]=t.getUint8(s)}else s instanceof Color3&&(this.values=[i,...s.values]);this.A=this.values[0],this.alpha=this.values[0],this.R=this.values[1],this.G=this.values[2],this.B=this.values[3],this.Color3=new Color3(this.R,this.G,this.B)}getRGBComponents=()=>[this.R,this.G,this.B]}class Instance{constructor(){this.Archivable=!0,this.ClassName=this.constructor.name,this.Name=this.constructor.name,this.Parent=null,this.RobloxLocked=!1,this.Children=[],this._isDistroyed=!1,this.referentId=""}set _isDistroyed(s){!0===s&&this.Distroy()}ClearAllChildren(){null==Children[0]||this._isDistroyed||this.Children.forEach(s=>{Distroy()})}Clone(){if(!this._isDistroyed||this.Archivable){let t=Object.assign({},this);return t.Children=[],this.Children.forEach(s=>{this.Archivable&&t.Children.push(s)}),t}}Distroy(){if(!this._isDistroyed){if(this.Parent){const s=this.Parent.Children.indexOf(this);s=s.splice(x,1),this.Parent=null}this.Archivable=!1,this._isDistroyed=!0,this.ClearAllChildren(),Children=[]}}GetChildren=()=>{this._isDistroyed||this.Children||this.Children};GetDescendants(){if(!this._isDistroyed){let s=this.GetChildren(),t=[...s];return s.forEach(s=>{t.concat(s.GetDescendants())}),t}}IsA=s=>!_isDistroyed&&this instanceof RoModules.Classes[s];IsAncestorOf(s){if(!_isDistroyed){s=s.Parent;return!!s&&(s===this||this.IsAncestorOf(s))}}IsDescendantOf=s=>!_isDistroyed&&s.IsAncestorOf(this)}class Folder extends Instance{constructor(){super()}}class PVInstance extends Instance{constructor(){super()}}class BasePart extends PVInstance{constructor(){super(),this.Anchored=!1,this.AssemblyAngularVelocity,this.AssemblyCenterOfMass,this.AssemblyLinearVelocity,this.AssemblyMass,this.AssemblyRootPart,this.BackSurface,this.BottomSurface,this.BrickColor,this.CFrame,this.CanCollide,this.CanQuery,this.CanTouch,this.CastShadow,this.CenterOfMass,this.CollisionGroupId,this.Color,this.CustomPhysicalProperties,this.FrontSurface,this.LeftSurface,this.LocalTransparencyModifier,this.Locked,this.Mass,this.Massless,this.Material,this.Orientation,this.PivotOffset,this.Position,this.ReceiveAge,this.Reflectance,this.ResizeIncrement,this.ResizeableFaces,this.RightSurface,this.RootPriority,this.Rotation,this.Size,this.TopSurface,this.Transparency}}class FormFactorPart extends BasePart{constructor(){super()}}class Model extends PVInstance{constructor(){super(),this.ClassName="Model",this.WorldPivot,this.PrimaryPart,this.LevelOfDetail}}class Part extends FormFactorPart{constructor(){super(),this.ClassName="Part",this.Shape}}class Players extends Instance{constructor(){super(),this.BubbleChat,this.CharacterAutoLoads,this.ClassicChat,this.LocalPlayer,this.MaxPlayers,this.MaxPlayersNumberernal,this.PreferredPlayers,this.PreferredPlayersNumberernal,this.RespawnTime}}class Selection extends Instance{constructor(){super(),this.ActiveInstance,this.SelectionThickness}}class Terrain extends BasePart{constructor(){super(),this.Decoration,this.MaterialColors,this.MaxExtents,this.WaterColor,this.WaterReflectance,this.WaterTransparency,this.WaterWaveSize,this.WaterWaveSpeed}}class Workspace extends Model{constructor(){super(),this.ClassName="Workspace",this.AllowThirdPartySales=!1,this.AnimationWeightedBlendFix,this.ClientAnimatorThrottling,this.CurrentCamera,this.DistributedGameTime,this.FallenPartsDestroyHeight,this.Gravity,this.HumanoidOnlySetCollisionsOnStateChange,this.InterpolationThrottling,this.MeshPartHeadsAndAccessories,this.PhysicsSimulationRate,this.PhysicsSteppingMethod,this.SignalBehavior,this.StreamingEnabled,this.StreamingMinRadius,this.StreamingPauseMode,this.StreamingTargetRadius,this.Terrain,this.TouchesUseCollisionGroups}}class Camera extends Instance{constructor(){super(),this.CFrame,this.CameraSubject,this.CameraType,this.DiagonalFieldOfView,this.FieldOfView,this.FieldOfViewMode,this.Focus,this.HeadLocked,this.HeadScale,this.MaxAxisFieldOfView,this.NearPlaneZ,this.ViewportSize}}class GuiService extends Instance{constructor(){super(),this.AutoSelectGuiEnabled,this.CoreGuiNavigationEnabled,this.GuiNavigationEnabled,this.MenuIsOpen,this.SelectedObject}}export{BasePart,BaseVector,CFrame,Camera,Color3,Color3uint8,Folder,FormFactorPart,GuiService,Instance,Model,PVInstance,Part,Players,Selection,Terrain,Vector3,Workspace};
